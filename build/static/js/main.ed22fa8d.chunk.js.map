{"version":3,"sources":["Card.js","CardList.js","Searchbox.js","robots.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","cardComponent","map","user","i","src_Card","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","username","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","filteredRobots","filter","toLowerCase","includes","src_Searchbox","src_Scroll","src_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed22fa8d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ( {name, email, id}) =>{\r\n    \r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src= {`https://robohash.org/${id}?200*200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardComponent = robots.map((user, i) => {\r\n        return (\r\n        <Card \r\n        key={i} \r\n        id={robots[i].id}\r\n        name={robots[i].name} \r\n        email={robots[i].email}\r\n        />\r\n        )\r\n    })\r\n    return(\r\n        <div>\r\n           {cardComponent}\r\n         </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield, searchChange}) =>{\r\n    return(\r\n        <div className='pa2'>\r\n            <input className='pa2 ba b--blue bg-light-green' \r\n                type='search' \r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Ajirireloja Olubambam',\r\n    username: 'Em',\r\n    email: 'shortmandevil@hell.com'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Fart Smoker',\r\n    username: 'Arinze',\r\n    email: 'schomoker@farts.cigar'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Fat Cow',\r\n    username: 'I\\'m sorry guys',\r\n    email: 'Nathan@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Dan Vic',\r\n    username: 'Bororo',\r\n    email: 'ikeinfinix@knack.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Bukoye Enoch',\r\n    username: 'Longitude',\r\n    email: 'youarenot@enoch.bible'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'John Paul',\r\n    username: 'Arsenal',\r\n    email: 'nEwErAaRsEnAl@NoBaNtEr.6th'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Eluma Sataniah',\r\n    username: 'Lucifer',\r\n    email: 'hellfire@2023.hot'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Peculiar',\r\n    username: 'Sunake ',\r\n    email: 'mandema@ubuntum.com'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Anthony Martial',\r\n    username: 'Is better than Hazard',\r\n    email: 'nextronaldo@united.com'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Meat Beater',\r\n    username: 'Slap the Salame',\r\n    email: 'nivesfc@night.com'\r\n  }\r\n];\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll', border: '3px solid black', height: '500px'}}>\r\n        {props.children}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from './CardList';\r\nimport Searchbox from './Searchbox';\r\nimport {robots} from './robots';\r\nimport Scroll from './Scroll';\r\n\r\n\r\nclass App extends Component{\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: robots,\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value  })\r\n        }\r\n\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className='f1'>ROBOFRIENDS</h1>\r\n                <Searchbox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <CardList robots={filteredRobots} />\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport './App.css'   \n\nReactDOM.render(<App />\n           \n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}